{
  "project": {
    "name": "PyChess",
    "path": "~/Projects/PyChess",
    "description": "Elegant chess game implementation with GUI using agent orchestration",
    "type": "game_application"
  },
  "instructions": {
    "mode": "orchestrator",
    "approach": "You are acting as a puppeteer orchestrating local agents to build this project. You should NOT write code directly. Instead, use the MCP tools to create agents and have them generate the code.",
    "workflow": [
      "1. Create specialized agents for each component",
      "2. Have agents generate their respective code",
      "3. Coordinate between agents for integration",
      "4. Use validation tools to ensure quality",
      "5. Use git tools to track progress"
    ]
  },
  "architecture": {
    "overview": "Clean separation of concerns with modular Python architecture",
    "structure": {
      "src/game/": "Core game logic",
      "src/gui/": "User interface components",
      "src/ai/": "Chess AI opponent",
      "src/utils/": "Shared utilities",
      "tests/": "Test suite",
      "assets/": "Images and resources"
    },
    "components": [
      {
        "name": "GameEngine",
        "path": "src/game/engine.py",
        "responsibility": "Chess rules, move validation, game state",
        "agent_name": "ChessRulesExpert",
        "agent_prompt": "You are an expert in chess rules and game logic. Create clean, well-documented code for chess game mechanics including piece movements, capture rules, check/checkmate detection, and special moves (castling, en passant, promotion)."
      },
      {
        "name": "Board",
        "path": "src/game/board.py",
        "responsibility": "Board representation and piece positions",
        "agent_name": "BoardArchitect",
        "agent_prompt": "You are an expert in data structures for game boards. Create an efficient board representation with methods for piece placement, movement, and position queries. Use clean OOP design with proper encapsulation."
      },
      {
        "name": "Pieces",
        "path": "src/game/pieces.py",
        "responsibility": "Individual piece classes with movement patterns",
        "agent_name": "PieceDesigner",
        "agent_prompt": "You are an expert in object-oriented design for game pieces. Create a base Piece class and derived classes for each chess piece (King, Queen, Rook, Bishop, Knight, Pawn) with their specific movement patterns and validation."
      },
      {
        "name": "GUI",
        "path": "src/gui/interface.py",
        "responsibility": "Tkinter-based graphical interface",
        "agent_name": "UIDesigner",
        "agent_prompt": "You are an expert in Python Tkinter GUI development. Create an elegant chess board interface with piece rendering, move highlighting, drag-and-drop support, and game status display. Focus on clean, responsive design."
      },
      {
        "name": "AI",
        "path": "src/ai/opponent.py",
        "responsibility": "Simple minimax AI opponent",
        "agent_name": "AIStrategist",
        "agent_prompt": "You are an expert in game AI algorithms. Implement a chess AI using minimax algorithm with alpha-beta pruning. Include position evaluation, move ordering, and adjustable difficulty levels. Keep it efficient and under 300 lines."
      },
      {
        "name": "TestSuite",
        "path": "tests/test_game.py",
        "responsibility": "Comprehensive test coverage",
        "agent_name": "TestEngineer",
        "agent_prompt": "You are an expert in Python testing with pytest. Create comprehensive tests for all game components including move validation, game rules, edge cases, and integration tests. Aim for high coverage."
      }
    ]
  },
  "mcp_usage": {
    "tools": {
      "workspace": "File operations - reading, writing, creating project structure",
      "git": "Version control - commits after each component",
      "validation": "Running tests and checking code quality",
      "local_model": "Agent reasoning and code generation"
    },
    "agent_creation_sequence": [
      {
        "step": 1,
        "tool": "workspace",
        "operation": "create",
        "description": "Create project directory structure"
      },
      {
        "step": 2,
        "tool": "create_agent",
        "params": {
          "name": "ChessRulesExpert",
          "description": "Expert in chess rules and game mechanics",
          "system_prompt": "You are an expert in chess rules and game logic...",
          "managed_file": "src/game/engine.py"
        }
      },
      {
        "step": 3,
        "tool": "chat_with_agent",
        "params": {
          "agent_id": "[ChessRulesExpert_id]",
          "message": "Create a complete chess game engine with all rules implemented",
          "task_type": "create"
        }
      },
      {
        "step": 4,
        "tool": "workspace",
        "operation": "write",
        "description": "Save generated code to file"
      },
      {
        "step": 5,
        "tool": "git",
        "operation": "commit",
        "description": "Commit the component"
      }
    ]
  },
  "quality_standards": {
    "code_style": "PEP 8 compliant with type hints",
    "max_file_length": 300,
    "max_function_complexity": 7,
    "test_coverage": "Minimum 80%",
    "documentation": "Docstrings for all public methods"
  },
  "validation_sequence": [
    {
      "stage": "after_each_component",
      "commands": [
        "validation_tool operation=length",
        "validation_tool operation=quality"
      ]
    },
    {
      "stage": "after_all_components",
      "commands": [
        "validation_tool operation=test",
        "validation_tool operation=all"
      ]
    }
  ],
  "expected_outcome": {
    "deliverables": [
      "Fully functional chess game with GUI",
      "AI opponent with adjustable difficulty",
      "Comprehensive test suite with >80% coverage",
      "Clean git history with atomic commits",
      "All files under 300 lines"
    ],
    "run_command": "python src/main.py",
    "test_command": "pytest tests/ --cov=src"
  },
  "important_notes": [
    "DO NOT write code directly - use agents",
    "Each agent manages exactly ONE file",
    "Use workspace tool for all file operations",
    "Commit after each successful component",
    "Run validation after each major change",
    "If an agent's code exceeds 300 lines, have them refactor",
    "Coordinate between agents for interfaces"
  ]
}