"""Workspace Tool - File Operations with XML Metadata Support

This tool handles all workspace file operations including reading, writing, and managing
files with support for both JSON and XML metadata generated by agents.
"""

import logging
import os
import shutil
import xml.etree.ElementTree as ET
from pathlib import Path
from typing import Any, Dict, List

from src.core.utils.utils import create_mcp_response, handle_exception
from src.schemas.files.python_file import (
    PythonFile, PythonClass, PythonMethod, PythonFunction,
    PythonImport, PythonVariable, create_empty_python_file
)
from src.core.files.json_file_manager import JSONFileManager

logger = logging.getLogger(__name__)


# Initialize file manager for jinja2 template rendering
def _get_file_manager(workspace_root: Path) -> JSONFileManager:
    """Get JSONFileManager instance for template rendering"""
    templates_path = Path("/app/templates")  # Fixed absolute path
    return JSONFileManager(str(workspace_root), str(templates_path))


def _generate_python_with_jinja2(xml_root: ET.Element) -> str:
    """Generate Python code from XML structure using jinja2 template"""
    try:
        # Load the jinja2 template
        template_path = Path(__file__).parent.parent.parent.parent.parent / "templates"
        env = Environment(loader=FileSystemLoader(str(template_path)))
        template = env.get_template("python_file.j2")

        # Parse XML into data structures that match the template
        data = {
            'module_docstring': None,
            'imports': [],
            'variables': [],  # constants
            'classes': [],
            'functions': [],
            'dataclasses': []  # unused but required by template
        }

        # Extract module docstring from metadata
        metadata_elem = xml_root.find('metadata')
        if metadata_elem is not None:
            desc_elem = metadata_elem.find('description')
            if desc_elem is not None and desc_elem.text:
                data['module_docstring'] = desc_elem.text.strip()

        # Process imports
        imports_elem = xml_root.find('imports')
        if imports_elem is not None:
            for import_elem in imports_elem.findall('import'):
                module = import_elem.get('module', '')
                items = import_elem.get('items', '')
                if module:
                    data['imports'].append(Import(module=module, items=items if items else None))

        # Process constants as variables
        constants_elem = xml_root.find('constants')
        if constants_elem is not None:
            for const_elem in constants_elem.findall('constant'):
                name = const_elem.get('name', '')
                const_type = const_elem.get('type', '')
                value = const_elem.get('value', '')
                if name and value:
                    data['variables'].append(Constant(name=name, type=const_type, value=value))

        # Process functions
        functions_elem = xml_root.find('functions')
        if functions_elem is not None:
            for func_elem in functions_elem.findall('function'):
                name = func_elem.get('name', 'unknown_function')

                # Extract parameters
                parameters = []
                params_elem = func_elem.find('parameters')
                if params_elem is not None:
                    for param_elem in params_elem.findall('parameter'):
                        param_name = param_elem.get('name', '')
                        param_type = param_elem.get('type', '')
                        param_default = param_elem.get('default', '')

                        if param_name:
                            parameters.append(Parameter(
                                name=param_name,
                                type=param_type if param_type else None,
                                default=param_default if param_default else None
                            ))

                # Extract return type and body
                return_type = None
                returns_elem = func_elem.find('returns')
                if returns_elem is not None:
                    return_type = returns_elem.get('type', 'None')

                body = "pass"
                body_elem = func_elem.find('body')
                if body_elem is not None and body_elem.text:
                    body = body_elem.text.strip()

                data['functions'].append(Function(
                    name=name,
                    parameters=parameters,
                    return_type=return_type,
                    body=body
                ))

        # Process classes
        classes_elem = xml_root.find('classes')
        if classes_elem is not None:
            for class_elem in classes_elem.findall('class'):
                class_name = class_elem.get('name', 'UnknownClass')

                # Class docstring
                docstring = None
                docstring_elem = class_elem.find('docstring')
                if docstring_elem is not None and docstring_elem.text:
                    docstring = docstring_elem.text.strip()

                methods = []

                # Process __init__ method
                init_elem = class_elem.find('init_method')
                if init_elem is not None:
                    init_params = []
                    params_elem = init_elem.find('parameters')
                    if params_elem is not None:
                        for param_elem in params_elem.findall('parameter'):
                            param_name = param_elem.get('name', '')
                            param_type = param_elem.get('type', '')
                            param_default = param_elem.get('default', '')

                            if param_name:
                                init_params.append(Parameter(
                                    name=param_name,
                                    type=param_type if param_type else None,
                                    default=param_default if param_default else None
                                ))

                    init_body = "pass"
                    body_elem = init_elem.find('body')
                    if body_elem is not None and body_elem.text:
                        init_body = body_elem.text.strip()

                    methods.append(Method(
                        name="__init__",
                        parameters=init_params,
                        body=init_body
                    ))

                # Process other methods
                methods_elem = class_elem.find('methods')
                if methods_elem is not None:
                    for method_elem in methods_elem.findall('method'):
                        method_name = method_elem.get('name', 'unknown_method')

                        # Extract parameters
                        method_params = []
                        params_elem = method_elem.find('parameters')
                        if params_elem is not None:
                            for param_elem in params_elem.findall('parameter'):
                                param_name = param_elem.get('name', '')
                                param_type = param_elem.get('type', '')
                                param_default = param_elem.get('default', '')

                                if param_name:
                                    method_params.append(Parameter(
                                        name=param_name,
                                        type=param_type if param_type else None,
                                        default=param_default if param_default else None
                                    ))

                        # Extract return type and body
                        method_return_type = None
                        returns_elem = method_elem.find('returns')
                        if returns_elem is not None:
                            method_return_type = returns_elem.get('type', 'None')

                        method_body = "pass"
                        body_elem = method_elem.find('body')
                        if body_elem is not None and body_elem.text:
                            method_body = body_elem.text.strip()

                        methods.append(Method(
                            name=method_name,
                            parameters=method_params,
                            return_type=method_return_type,
                            body=method_body
                        ))

                data['classes'].append(Class(
                    name=class_name,
                    docstring=docstring,
                    methods=methods
                ))

        # Render the template
        return template.render(**data)

    except Exception as e:
        logger.error(f"Error generating Python code with jinja2: {e}")
        return f'# Error generating code: {e}\npass\n'


async def workspace_tool(arguments: Dict[str, Any]) -> Dict[str, Any]:
    """Workspace operations tool

    Args:
        arguments: Tool arguments containing action and parameters

    Returns:
        MCP response dictionary
    """
    try:
        action = arguments.get("action")
        if not action:
            return create_mcp_response(False, "Missing 'action' parameter")

        # Get the workspace root (default to /workspace for Docker)
        workspace_root = Path(os.environ.get("WORKSPACE_ROOT", "/workspace"))

        if action == "read":
            return await _read_file(arguments, workspace_root)
        elif action == "write":
            return await _write_file(arguments, workspace_root)
        elif action == "delete":
            return await _delete_file(arguments, workspace_root)
        elif action == "list":
            return await _list_directory(arguments, workspace_root)
        elif action == "search":
            return await _search_files(arguments, workspace_root)
        elif action == "create_dir":
            return await _create_directory(arguments, workspace_root)
        elif action == "tree":
            return await _show_tree(arguments, workspace_root)
        elif action == "write_artifact":
            return await _write_artifact(arguments, workspace_root)
        elif action == "write_structured":
            return await _write_structured_file(arguments, workspace_root)
        elif action == "generate_from_metadata":
            return await _generate_from_metadata(arguments, workspace_root)
        else:
            return create_mcp_response(False, f"Unknown workspace action: {action}")

    except Exception as e:
        return handle_exception(e, "workspace_tool")


async def _read_file(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Read file content"""
    try:
        file_path = arguments.get("path")
        if not file_path:
            return create_mcp_response(False, "Missing 'path' parameter for read action")

        full_path = workspace_root / file_path

        if not full_path.exists():
            return create_mcp_response(False, f"File does not exist: {file_path}")

        if not full_path.is_file():
            return create_mcp_response(False, f"Path is not a file: {file_path}")

        # Check if it's a binary file
        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            return create_mcp_response(False, f"Cannot read binary file: {file_path}")

        return create_mcp_response(True, f"Read {len(content)} characters from {file_path}", {
            "path": file_path,
            "content": content,
            "size": len(content)
        })

    except Exception as e:
        return handle_exception(e, "_read_file")


async def _write_file(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Write file content with support for agent metadata"""
    try:
        file_path = arguments.get("path")
        content = arguments.get("content", "")

        if not file_path:
            return create_mcp_response(False, "Missing 'path' parameter for write action")

        full_path = workspace_root / file_path

        # Create parent directories if they don't exist
        full_path.parent.mkdir(parents=True, exist_ok=True)

        # Write the file
        with open(full_path, 'w', encoding='utf-8') as f:
            f.write(content)

        # Check if there's metadata for this file and process it
        await _process_file_metadata(file_path, workspace_root)

        return create_mcp_response(True, f"Successfully wrote {len(content)} characters to {file_path}", {
            "path": file_path,
            "size": len(content),
            "created": not full_path.exists()
        })

    except Exception as e:
        return handle_exception(e, "_write_file")


async def _process_file_metadata(file_path: str, workspace_root: Path) -> None:
    """Process agent metadata files (both JSON and XML) for the given file

    This function looks for corresponding .meta files and processes them
    to enhance the generated code with component tracking.
    """
    try:
        meta_dir = workspace_root / ".meta"

        # Check for JSON metadata first (backward compatibility)
        json_meta_file = meta_dir / f"{file_path}.json"
        xml_meta_file = meta_dir / f"{file_path}.xml"

        if xml_meta_file.exists():
            logger.info(f"Found XML metadata for {file_path}, processing...")
            await _process_xml_metadata(file_path, xml_meta_file, workspace_root)
        elif json_meta_file.exists():
            logger.info(f"Found JSON metadata for {file_path}, processing...")
            await _process_json_metadata(file_path, json_meta_file, workspace_root)
        else:
            logger.debug(f"No metadata found for {file_path}")

    except Exception as e:
        logger.error(f"Error processing metadata for {file_path}: {e}")


async def _process_xml_metadata(file_path: str, xml_meta_file: Path, workspace_root: Path) -> None:
    """Process XML metadata file to enhance generated code"""
    try:
        import xml.etree.ElementTree as ET

        # Parse XML metadata
        tree = ET.parse(xml_meta_file)
        root = tree.getroot()

        # Extract component information from XML
        components = []

        # Find all components (classes, functions, etc.)
        for class_elem in root.findall('.//class'):
            components.append({
                'type': 'class',
                'id': class_elem.get('id'),
                'name': class_elem.get('name'),
                'line_start': class_elem.get('line_start'),
                'line_end': class_elem.get('line_end')
            })

        for func_elem in root.findall('.//function'):
            components.append({
                'type': 'function',
                'id': func_elem.get('id'),
                'name': func_elem.get('name'),
                'line_start': func_elem.get('line_start'),
                'line_end': func_elem.get('line_end')
            })

        # Add component tracking comments to the file if components were found
        if components:
            await _add_component_tracking(file_path, components, workspace_root)

        logger.info(f"Processed XML metadata for {file_path}: {len(components)} components")

    except Exception as e:
        logger.error(f"Error processing XML metadata {xml_meta_file}: {e}")


async def _process_json_metadata(file_path: str, json_meta_file: Path, workspace_root: Path) -> None:
    """Process JSON metadata file (backward compatibility)"""
    try:
        import json

        with open(json_meta_file, 'r') as f:
            metadata = json.load(f)

        logger.info(f"Processed JSON metadata for {file_path}: {metadata.get('description', 'No description')}")

    except Exception as e:
        logger.error(f"Error processing JSON metadata {json_meta_file}: {e}")


async def _add_component_tracking(file_path: str, components: List[Dict[str, Any]], workspace_root: Path) -> None:
    """Add component tracking comments to the generated file"""
    try:
        full_path = workspace_root / file_path

        if not full_path.exists():
            return

        with open(full_path, 'r') as f:
            content = f.read()

        # Add component tracking header
        tracking_header = "# Component tracking enabled by agent metadata\n"
        tracking_header += f"# Components: {', '.join([c['name'] for c in components])}\n\n"

        enhanced_content = tracking_header + content

        with open(full_path, 'w') as f:
            f.write(enhanced_content)

        logger.info(f"Added component tracking to {file_path}")

    except Exception as e:
        logger.error(f"Error adding component tracking to {file_path}: {e}")


async def _delete_file(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Delete file or directory"""
    try:
        file_path = arguments.get("path")
        if not file_path:
            return create_mcp_response(False, "Missing 'path' parameter for delete action")

        full_path = workspace_root / file_path

        if not full_path.exists():
            return create_mcp_response(False, f"Path does not exist: {file_path}")

        if full_path.is_file():
            full_path.unlink()
            return create_mcp_response(True, f"Successfully deleted file: {file_path}")
        elif full_path.is_dir():
            shutil.rmtree(full_path)
            return create_mcp_response(True, f"Successfully deleted directory: {file_path}")
        else:
            return create_mcp_response(False, f"Unknown path type: {file_path}")

    except Exception as e:
        return handle_exception(e, "_delete_file")


async def _list_directory(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """List directory contents"""
    try:
        dir_path = arguments.get("path", ".")
        include_hidden = arguments.get("include_hidden", False)
        recursive = arguments.get("recursive", False)

        full_path = workspace_root / dir_path

        if not full_path.exists():
            return create_mcp_response(False, f"Directory does not exist: {dir_path}")

        if not full_path.is_dir():
            return create_mcp_response(False, f"Path is not a directory: {dir_path}")

        files = []
        if recursive:
            for item in full_path.rglob("*"):
                if not include_hidden and item.name.startswith('.'):
                    continue
                relative_path = item.relative_to(workspace_root)
                files.append({
                    "path": str(relative_path),
                    "type": "file" if item.is_file() else "directory",
                    "size": item.stat().st_size if item.is_file() else None
                })
        else:
            for item in full_path.iterdir():
                if not include_hidden and item.name.startswith('.'):
                    continue
                relative_path = item.relative_to(workspace_root)
                files.append({
                    "path": str(relative_path),
                    "type": "file" if item.is_file() else "directory",
                    "size": item.stat().st_size if item.is_file() else None
                })

        return create_mcp_response(True, f"Listed {len(files)} items in {dir_path}", {
            "path": dir_path,
            "files": files,
            "count": len(files)
        })

    except Exception as e:
        return handle_exception(e, "_list_directory")


async def _search_files(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Search for files matching pattern"""
    try:
        pattern = arguments.get("pattern", "*")
        file_pattern = arguments.get("file_pattern", "*.py")
        search_path = arguments.get("path", ".")

        full_path = workspace_root / search_path

        if not full_path.exists():
            return create_mcp_response(False, f"Search path does not exist: {search_path}")

        matches = []
        for item in full_path.rglob(file_pattern):
            if item.is_file():
                relative_path = item.relative_to(workspace_root)
                matches.append({
                    "path": str(relative_path),
                    "size": item.stat().st_size
                })

        return create_mcp_response(True, f"Found {len(matches)} files matching pattern", {
            "pattern": file_pattern,
            "matches": matches,
            "count": len(matches)
        })

    except Exception as e:
        return handle_exception(e, "_search_files")


async def _create_directory(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Create directory"""
    try:
        dir_path = arguments.get("path")
        if not dir_path:
            return create_mcp_response(False, "Missing 'path' parameter for create_dir action")

        full_path = workspace_root / dir_path
        full_path.mkdir(parents=True, exist_ok=True)

        return create_mcp_response(True, f"Successfully created directory: {dir_path}", {
            "path": dir_path
        })

    except Exception as e:
        return handle_exception(e, "_create_directory")


async def _show_tree(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Show directory tree structure"""
    try:
        root_path = arguments.get("path", ".")
        max_depth = arguments.get("max_depth", 3)
        include_hidden = arguments.get("include_hidden", False)

        full_path = workspace_root / root_path

        if not full_path.exists():
            return create_mcp_response(False, f"Path does not exist: {root_path}")

        tree_structure = _build_tree_structure(full_path, workspace_root, max_depth, include_hidden)

        return create_mcp_response(True, f"Directory tree for {root_path}", {
            "path": root_path,
            "tree": tree_structure
        })

    except Exception as e:
        return handle_exception(e, "_show_tree")


def _build_tree_structure(path: Path, workspace_root: Path, max_depth: int, include_hidden: bool, current_depth: int = 0) -> List[Dict[str, Any]]:
    """Build tree structure recursively"""
    if current_depth >= max_depth:
        return []

    items = []
    try:
        for item in sorted(path.iterdir()):
            if not include_hidden and item.name.startswith('.'):
                continue

            relative_path = item.relative_to(workspace_root)
            item_dict = {
                "name": item.name,
                "path": str(relative_path),
                "type": "file" if item.is_file() else "directory"
            }

            if item.is_file():
                item_dict["size"] = item.stat().st_size
            elif item.is_dir():
                item_dict["children"] = _build_tree_structure(
                    item, workspace_root, max_depth, include_hidden, current_depth + 1
                )

            items.append(item_dict)

    except PermissionError:
        # Skip directories we can't read
        pass

    return items


async def _write_artifact(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Write artifact file with special handling"""
    try:
        # This is essentially the same as write but with different semantics
        # Could be used for generated artifacts, templates, etc.
        return await _write_file(arguments, workspace_root)

    except Exception as e:
        return handle_exception(e, "_write_artifact")


async def _write_structured_file(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Write structured file with XML metadata support"""
    try:
        file_path = arguments.get("path")
        structured_content = arguments.get("structured_content")

        if not file_path:
            return create_mcp_response(False, "Missing 'path' parameter for write_structured action")

        if not structured_content:
            return create_mcp_response(False, "Missing 'structured_content' parameter for write_structured action")

        # Import the XML processing modules
        from src.schemas.xml_serializer import PythonComponentXMLSerializer
        from src.schemas.python_components import PythonFile
        from src.core.validation.xml_validator import PythonCodeXMLValidator

        # Parse the structured XML content
        try:
            if isinstance(structured_content, str):
                # If it's a string, wrap it in a root element if needed
                if not structured_content.strip().startswith('<'):
                    return create_mcp_response(False, "structured_content must be valid XML")

                # Parse the XML
                root = ET.fromstring(structured_content)
            else:
                return create_mcp_response(False, "structured_content must be an XML string")

            # Validate the XML structure
            validator = PythonCodeXMLValidator()
            validation_result = validator.validate_xml_string(structured_content)

            if not validation_result.is_valid:
                error_msg = f"Invalid XML structure: {'; '.join(validation_result.errors)}"
                return create_mcp_response(False, error_msg)

            # Generate Python code from the XML structure
            # For now, let's extract basic information and generate simple Python code
            python_code = _generate_python_from_xml(root)

            # Write both the metadata and the generated code
            full_path = workspace_root / file_path

            # Ensure parent directories exist
            full_path.parent.mkdir(parents=True, exist_ok=True)

            # Write the generated Python code
            with open(full_path, "w", encoding="utf-8") as f:
                f.write(python_code)

            # Also save the XML metadata
            meta_dir = workspace_root / ".meta"
            meta_dir.mkdir(exist_ok=True)
            meta_file = meta_dir / f"{file_path}.xml"
            meta_file.parent.mkdir(parents=True, exist_ok=True)

            with open(meta_file, "w", encoding="utf-8") as f:
                f.write(structured_content)

            logger.info(f"✅ Structured file created: {full_path}")
            logger.info(f"📝 Metadata saved: {meta_file}")

            return create_mcp_response(
                True,
                f"Successfully created structured file {file_path} with metadata",
                {
                    "file_path": str(full_path),
                    "metadata_path": str(meta_file),
                    "file_size": full_path.stat().st_size
                }
            )

        except ET.ParseError as e:
            return create_mcp_response(False, f"XML parsing error: {e}")
        except Exception as e:
            return create_mcp_response(False, f"Error processing structured content: {e}")

    except Exception as e:
        return handle_exception(e, "_write_structured_file")


def _generate_python_from_xml(xml_root: ET.Element) -> str:
    """Generate Python code from XML structure"""
    try:
        # Extract basic information from XML
        lines = []

        # Add header comment
        lines.append('"""Generated Python file from structured XML metadata"""')
        lines.append('')

        # Process imports
        imports_elem = xml_root.find('imports')
        if imports_elem is not None:
            for import_elem in imports_elem.findall('import'):
                module = import_elem.get('module', '')
                items = import_elem.get('items', '')
                if items:
                    lines.append(f'from {module} import {items}')
                else:
                    lines.append(f'import {module}')
            lines.append('')

        # Process constants
        constants_elem = xml_root.find('constants')
        if constants_elem is not None:
            for const_elem in constants_elem.findall('constant'):
                name = const_elem.get('name', '')
                value = const_elem.get('value', '')
                if name and value:
                    lines.append(f'{name} = {value}')
            lines.append('')

        # Process functions
        functions_elem = xml_root.find('functions')
        if functions_elem is not None:
            for func_elem in functions_elem.findall('function'):
                name = func_elem.get('name', 'unknown_function')

                # Extract parameters
                params = []
                params_elem = func_elem.find('parameters')
                if params_elem is not None:
                    for param_elem in params_elem.findall('parameter'):
                        param_name = param_elem.get('name', '')
                        param_type = param_elem.get('type', '')
                        param_default = param_elem.get('default', '')

                        if param_name:
                            if param_type and param_default:
                                params.append(f'{param_name}: {param_type} = {param_default}')
                            elif param_type:
                                params.append(f'{param_name}: {param_type}')
                            else:
                                params.append(param_name)

                # Extract return type
                return_type = ''
                returns_elem = func_elem.find('returns')
                if returns_elem is not None:
                    return_type = f" -> {returns_elem.get('type', 'None')}"

                # Function signature
                lines.append(f'def {name}({", ".join(params)}){return_type}:')

                # Function body
                body_elem = func_elem.find('body')
                if body_elem is not None and body_elem.text:
                    for line in body_elem.text.strip().split('\n'):
                        lines.append(f'    {line}')
                else:
                    lines.append('    pass')
                lines.append('')

        # Process classes
        classes_elem = xml_root.find('classes')
        if classes_elem is not None:
            for class_elem in classes_elem.findall('class'):
                class_name = class_elem.get('name', 'UnknownClass')

                lines.append(f'class {class_name}:')

                # Class docstring
                docstring_elem = class_elem.find('docstring')
                if docstring_elem is not None and docstring_elem.text:
                    lines.append(f'    """{docstring_elem.text.strip()}"""')
                    lines.append('')

                # Init method
                init_elem = class_elem.find('init_method')
                if init_elem is not None:
                    params = []
                    params_elem = init_elem.find('parameters')
                    if params_elem is not None:
                        for param_elem in params_elem.findall('parameter'):
                            param_name = param_elem.get('name', '')
                            param_type = param_elem.get('type', '')
                            param_default = param_elem.get('default', '')

                            if param_name:
                                if param_type and param_default:
                                    params.append(f'{param_name}: {param_type} = {param_default}')
                                elif param_type:
                                    params.append(f'{param_name}: {param_type}')
                                else:
                                    params.append(param_name)

                    lines.append(f'    def __init__({", ".join(params)}):')

                    body_elem = init_elem.find('body')
                    if body_elem is not None and body_elem.text:
                        for line in body_elem.text.strip().split('\n'):
                            lines.append(f'        {line}')
                    else:
                        lines.append('        pass')
                    lines.append('')

                # Other methods
                methods_elem = class_elem.find('methods')
                if methods_elem is not None:
                    for method_elem in methods_elem.findall('method'):
                        method_name = method_elem.get('name', 'unknown_method')

                        params = []
                        params_elem = method_elem.find('parameters')
                        if params_elem is not None:
                            for param_elem in params_elem.findall('parameter'):
                                param_name = param_elem.get('name', '')
                                param_type = param_elem.get('type', '')
                                param_default = param_elem.get('default', '')

                                if param_name:
                                    if param_type and param_default:
                                        params.append(f'{param_name}: {param_type} = {param_default}')
                                    elif param_type:
                                        params.append(f'{param_name}: {param_type}')
                                    else:
                                        params.append(param_name)

                        return_type = ''
                        returns_elem = method_elem.find('returns')
                        if returns_elem is not None:
                            return_type = f" -> {returns_elem.get('type', 'None')}"

                        lines.append(f'    def {method_name}({", ".join(params)}){return_type}:')

                        body_elem = method_elem.find('body')
                        if body_elem is not None and body_elem.text:
                            for line in body_elem.text.strip().split('\n'):
                                lines.append(f'        {line}')
                        else:
                            lines.append('        pass')
                        lines.append('')

                lines.append('')

        return '\n'.join(lines)

    except Exception as e:
        logger.error(f"Error generating Python code from XML: {e}")
        return f'# Error generating code: {e}\npass\n'


async def _generate_from_metadata(arguments: Dict[str, Any], workspace_root: Path) -> Dict[str, Any]:
    """Generate Python file from existing XML metadata file using jinja2 template"""
    try:
        path = arguments.get("path")
        if not path:
            return create_mcp_response(False, "Missing 'path' parameter")

        # Ensure path is relative
        if path.startswith('/'):
            path = path[1:]

        # Check if metadata file exists
        meta_file = workspace_root / ".meta" / f"{path}.xml"
        if not meta_file.exists():
            return create_mcp_response(False, f"Metadata file not found: {meta_file}")

        logger.info(f"📖 Reading metadata from: {meta_file}")

        # Read XML metadata
        with open(meta_file, 'r', encoding='utf-8') as f:
            xml_content = f.read()

        # Parse XML to extract structured content
        try:
            # Remove XML declaration and comments for parsing
            clean_xml = xml_content
            if '<?xml' in clean_xml:
                clean_xml = clean_xml.split('?>', 1)[-1]

            # Remove comments
            import re
            clean_xml = re.sub(r'<!--.*?-->', '', clean_xml, flags=re.DOTALL)
            clean_xml = clean_xml.strip()

            # Parse the python_file element
            python_file_root = ET.fromstring(clean_xml)

            if python_file_root.tag != 'python_file':
                return create_mcp_response(False, f"Invalid metadata: root element must be 'python_file', got '{python_file_root.tag}'")

            # Generate Python code from XML metadata using jinja2 template
            python_code = _generate_python_with_jinja2(python_file_root)

            # Write the generated Python file
            target_file = workspace_root / path
            target_file.parent.mkdir(parents=True, exist_ok=True)

            with open(target_file, 'w', encoding='utf-8') as f:
                f.write(python_code)

            logger.info(f"✅ Generated Python file: {target_file}")

            return create_mcp_response(
                True,
                f"✅ Successfully generated {path} from metadata ({len(python_code)} chars)",
                {
                    "path": path,
                    "metadata_file": str(meta_file),
                    "generated_file": str(target_file),
                    "size": len(python_code)
                }
            )

        except ET.ParseError as e:
            return create_mcp_response(False, f"Invalid XML in metadata file: {e}")

    except Exception as e:
        return handle_exception(e, "_generate_from_metadata")