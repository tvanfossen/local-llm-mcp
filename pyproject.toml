[project]
name = "local-llm-mcp"
version = "0.1.0"
description = "Standardized Agent-Based Local LLM MCP Server with JSON Schema validation"
authors = [{name = "Tristan VanFossen", email = "vanfosst@gmail.com"}]
requires-python = ">=3.9"
dependencies = [
    "pydantic>=2.0.0",
    "starlette>=0.27.0",
    "uvicorn[standard]>=0.20.0",
    "fastapi>=0.100.0",
    "python-multipart>=0.0.6",
    "httpx>=0.24.0",
    "websockets>=11.0.0",
    "llama-cpp-python>=0.2.0",
    "cryptography>=41.0.0",
    "invoke>=2.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["api", "core", "schemas"]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "detect-secrets>=1.4.0",
]

[tool.black]
line-length = 120
target-version = ['py39']

[tool.isort]
profile = "black"
line_length = 120

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[tool.ruff]
line-length = 120
target-version = "py39"

[tool.ruff.lint]
select = [
    "E","W","F","I","B","C4","UP",
]
ignore = [
    "E501",  # Line too long (handled by formatter)
    "E722",  # Bare except (sometimes needed)
    "E402",  # Module imports not at top
    "E203",  # Whitespace before ':'
    "B008",  # Do not perform function calls in argument defaults
    "C901",  # Too complex
    "F401",  # Unused imports (during development)
    "F841",  # Local variable assigned but never used
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "D"]
"scripts/*" = ["D"]
"examples/*" = ["D"]

[tool.ruff.lint.mccabe]
max-complexity = 15  # Relaxed from 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.flake8]
max-line-length = 120
max-complexity = 15
ignore = "E203,W503,E501,E722,E402"
exclude = ".git,__pycache__,build,dist,venv,env"

[tool.coverage.run]
source = ["."]
omit = ["tests/*", "*/test_*.py", "setup.py", "*/migrations/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
