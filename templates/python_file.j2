{%- if metadata and metadata.description -%}
"""{{ metadata.description }}"""

{% endif -%}
{%- if imports -%}
{% for import in imports -%}
{% if import.imported_items -%}
from {{ import.module }} import {{ import.imported_items }}
{% elif import.alias -%}
import {{ import.module }} as {{ import.alias }}
{% else -%}
import {{ import.module }}
{% endif -%}
{% endfor -%}

{% endif -%}
{%- if constants -%}
{% for constant in constants -%}
{{ constant.name }}: {{ constant.type }} = {{ constant.value }}
{% endfor -%}

{% endif -%}
{%- if functions -%}
{% for func in functions -%}
def {{ func.name }}({% for param in func.parameters %}{{ param.name }}{% if param.type %}: {{ param.type }}{% endif %}{% if param.default %} = {{ param.default }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}){% if func.returns %} -> {{ func.returns.type }}{% endif %}:
{%- if func.docstring %}
    """{{ func.docstring }}"""
{% endif -%}
{% for operation in func.operations -%}
{%- if operation.type == 'validation' %}
    if not ({{ operation.condition }}):
        raise {{ operation.exception_type or 'ValueError' }}("{{ operation.exception_message or 'Invalid input' }}")
{%- elif operation.type == 'assignment' %}
    {{ operation.target }} = {{ operation.value }}
{%- elif operation.type == 'return' %}
    return {{ operation.value }}
{%- elif operation.type == 'function_call' %}
    {% if operation.target %}{{ operation.target }} = {% endif %}{{ operation.function_name }}({% for arg in operation.arguments %}{{ arg }}{% if not loop.last %}, {% endif %}{% endfor %})
{%- elif operation.type == 'arithmetic' %}
    {{ operation.target }} = {{ operation.operands[0] }} {{ operation.operator }} {{ operation.operands[1] }}
{%- elif operation.type == 'comparison' %}
    {{ operation.target }} = {{ operation.operands[0] }} {{ operation.operator }} {{ operation.operands[1] }}
{%- elif operation.type == 'logical' %}
    {{ operation.target }} = {{ operation.operands[0] }} {{ operation.operator }} {{ operation.operands[1] }}
{%- elif operation.type == 'conditional' %}
    if {{ operation.condition }}:
        {% if operation.target %}{{ operation.target }} = {% endif %}{{ operation.operands[0] }}
    else:
        {% if operation.target %}{{ operation.target }} = {% endif %}{{ operation.operands[1] }}
{%- elif operation.type == 'exception_handling' %}
    try:
        {{ operation.target }}
    except {{ operation.exception_type or 'Exception' }}:
        {{ operation.exception_message or '# Handle exception' }}
        pass
{%- elif operation.type == 'loop' %}
    # {{ operation.description or 'Loop implementation needed' }}
    pass
{%- else %}
    # {{ operation.type }}: {{ operation.description or 'TODO: Implement operation' }}
    pass
{%- endif %}
{% endfor %}
{% if not loop.last %}

{% endif -%}
{% endfor -%}
{% endif -%}
{%- if classes -%}
{% for class in classes -%}
class {{ class.name }}{% if class.base_classes %}({{ class.base_classes | join(', ') }}){% endif %}:
{%- if class.docstring %}
    """{{ class.docstring }}"""
{% endif -%}

{%- if class.init_method %}
    def __init__(self{% for param in class.init_method.parameters if param.name != 'self' %}, {{ param.name }}{% if param.type %}: {{ param.type }}{% endif %}{% if param.default %} = {{ param.default }}{% endif %}{% endfor %}):
{%- if class.init_method.docstring %}
        """{{ class.init_method.docstring }}"""
{% endif -%}
{% for operation in class.init_method.operations -%}
{%- if operation.type == 'assignment' %}
        self.{{ operation.target }} = {{ operation.value }}
{%- elif operation.type == 'validation' %}
        if not ({{ operation.condition }}):
            raise {{ operation.exception_type or 'ValueError' }}("{{ operation.exception_message or 'Invalid input' }}")
{%- elif operation.type == 'initialization' %}
        self.{{ operation.target }} = {{ operation.value }}
{%- else %}
        # {{ operation.type }}: {{ operation.description or 'TODO: Implement operation' }}
        pass
{%- endif %}
{% endfor -%}

{% endif -%}
{%- for method in class.methods %}
    def {{ method.name }}(self{% for param in method.parameters if param.name != 'self' %}, {{ param.name }}{% if param.type %}: {{ param.type }}{% endif %}{% if param.default %} = {{ param.default }}{% endif %}{% endfor %}){% if method.returns %} -> {{ method.returns.type }}{% endif %}:
{%- if method.docstring %}
        """{{ method.docstring }}"""
{% endif -%}
{% for operation in method.operations -%}
{%- if operation.type == 'validation' %}
        if not ({{ operation.condition }}):
            raise {{ operation.exception_type or 'ValueError' }}("{{ operation.exception_message or 'Invalid input' }}")
{%- elif operation.type == 'assignment' %}
        {{ operation.target }} = {{ operation.value }}
{%- elif operation.type == 'return' %}
        return {{ operation.value }}
{%- elif operation.type == 'function_call' %}
        {% if operation.target %}{{ operation.target }} = {% endif %}{{ operation.function_name }}({% for arg in operation.arguments %}{{ arg }}{% if not loop.last %}, {% endif %}{% endfor %})
{%- elif operation.type == 'arithmetic' %}
        {{ operation.target }} = {{ operation.operands[0] }} {{ operation.operator }} {{ operation.operands[1] }}
{%- elif operation.type == 'comparison' %}
        {{ operation.target }} = {{ operation.operands[0] }} {{ operation.operator }} {{ operation.operands[1] }}
{%- elif operation.type == 'logical' %}
        {{ operation.target }} = {{ operation.operands[0] }} {{ operation.operator }} {{ operation.operands[1] }}
{%- elif operation.type == 'conditional' %}
        if {{ operation.condition }}:
            {% if operation.target %}{{ operation.target }} = {% endif %}{{ operation.operands[0] }}
        else:
            {% if operation.target %}{{ operation.target }} = {% endif %}{{ operation.operands[1] }}
{%- elif operation.type == 'exception_handling' %}
        try:
            {{ operation.target }}
        except {{ operation.exception_type or 'Exception' }}:
            {{ operation.exception_message or '# Handle exception' }}
            pass
{%- elif operation.type == 'loop' %}
        # {{ operation.description or 'Loop implementation needed' }}
        pass
{%- else %}
        # {{ operation.type }}: {{ operation.description or 'TODO: Implement operation' }}
        pass
{%- endif %}
{% endfor -%}
{% if not loop.last %}

{% endif -%}
{% endfor -%}
{% if not loop.last %}

{% endif -%}
{% endfor -%}
{% endif -%}