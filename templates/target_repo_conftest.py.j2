"""
Pytest configuration for {{ project_name }} - Schema-compliant co-located tests.
Generated by local-llm-mcp on {{ generation_date }}.
"""

import pytest
from pathlib import Path
import sys

def pytest_collect_file(parent, file_path):
    """Custom test collection for co-located tests"""
    if file_path.suffix == ".py" and file_path.name.startswith("test_"):
        return pytest.Module.from_parent(parent, path=file_path)

def pytest_configure(config):
    """Configure pytest for co-located test structure"""
    # Add src/ to Python path for imports
    src_path = Path(__file__).parent / "src"
    if src_path.exists():
        sys.path.insert(0, str(src_path))

    # Add project root for any root-level imports
    project_root = Path(__file__).parent
    if str(project_root) not in sys.path:
        sys.path.insert(0, str(project_root))

def pytest_collection_modifyitems(config, items):
    """Modify test items to handle co-located structure and add markers"""
    for item in items:
        # Add markers based on test location
        test_path = Path(item.fspath)
        parts = test_path.parts

        if 'src' in parts:
            # Extract domain/category for markers
            src_idx = parts.index('src')
            if len(parts) > src_idx + 1:
                domain = parts[src_idx + 1]
                item.add_marker(pytest.mark.unit)
                item.add_marker(getattr(pytest.mark, domain))

                if len(parts) > src_idx + 2:
                    category = parts[src_idx + 2]
                    item.add_marker(getattr(pytest.mark, f"{domain}_{category}"))

def pytest_runtest_setup(item):
    """Setup hook for individual test runs"""
    # Ensure proper working directory
    test_path = Path(item.fspath)
    if 'src' in test_path.parts:
        # Change to function directory for co-located resources
        function_dir = test_path.parent
        original_cwd = Path.cwd()
        item.add_finalizer(lambda: __import__('os').chdir(str(original_cwd)))

@pytest.fixture(scope="session")
def src_root():
    """Provide path to src/ directory"""
    return Path(__file__).parent / "src"

@pytest.fixture(scope="session")
def project_root():
    """Provide path to project root"""
    return Path(__file__).parent

@pytest.fixture(scope="function")
def temp_dir(tmp_path):
    """Provide temporary directory for test isolation"""
    return tmp_path

@pytest.fixture(scope="function")
def function_dir(request):
    """Provide path to the function directory containing the test"""
    return Path(request.fspath).parent

# Project-specific fixtures can be added below
{% if custom_fixtures %}
{% for fixture in custom_fixtures %}
@pytest.fixture{{ fixture.scope and "(" + fixture.scope + ")" or "" }}
def {{ fixture.name }}({{ fixture.params or "" }}):
    """{{ fixture.docstring }}"""
    {{ fixture.implementation | indent(4) }}
{% endfor %}
{% endif %}
